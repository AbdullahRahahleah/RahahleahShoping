<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd	
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">
	
		<context:component-scan base-package="Rahahleah.shoppingbackend"></context:component-scan>
	
	<http pattern="/resources/**" security="none"/>
	
	<!-- http used to use spring security -->
	<http>
	<!--  if you want to use hasRhole("USER") you need to specify  ROLE_USER while if you use hasAuthiroty(USER) you don't need that prefix-->
	<!--  Here just the user who has role column table value USER can access to the system -->	
		<intercept-url pattern="/login" access="permitAll" />	
		<intercept-url pattern="/**" access="hasAuthority('USER')" />		
		<form-login login-page="/login"  />
		<logout />
	</http>

	<authentication-manager>
		<authentication-provider>
		<!-- here to read from DB (Credientionals), datasourec here read from hibernateconfig.java from  @Bean("dataSoruce") -->
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select email,password,enabled from user_detail where email =? "
				authorities-by-username-query="select email,role from USER_DETAIL where email=?"					
			/>

		</authentication-provider>
	</authentication-manager>

</beans:beans>
